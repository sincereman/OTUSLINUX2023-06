---

##Set timezone
- name: set timezone
  shell: timedatectl set-timezone Europe/Moscow

#Install Chrony to time Sync

- name: Synchronize datetime | Install chrony
  apt:
    name: chrony
    state: latest
  tags:
    - backupserver-datesync

#Enable Chrony Services to time Sync

- name: Synchronize datetime | Turn on chronyd
  service:
    name: chronyd
    enabled: yes
    state: started
  notify:
    - systemctl daemon reload
  tags:
    - backupserver-datesync


# Устанавливаем инструменты анализа сети
- name: install base tools
  apt:
    name:
      - traceroute
      - tcpdump
      - net-tools
      - mtr
      - curl
      - iperf3
    state: present
    update_cache: true
  tags:
    - netanalize


# Install BorgBackup
 
- name: Install borgbackup
  apt:
    name: "borgbackup"
    state: present
    update_cache: yes
  become: true
  tags:
    - dataserver
    - borgbackup


# Create SSH Key for borg users

# - name: Create a 2048-bit SSH key for user root in ~root/.ssh/id_rsa
#   ansible.builtin.user:
#     name: root
#     generate_ssh_key: yes
#     ssh_key_bits: 2048
#     ssh_key_file: .ssh/id_rsa_borg


- name: Copy publickey for borg
  template: 
    src: "files/id_rsa.pub"
    dest: ~root/.ssh/
    mode: '0600'
  tags:
    - dataserverborgconfig
    - dataserverprivatekey

- name: Copy privatekey for borg
  template: 
    src: "files/id_rsa"
    dest: ~root/.ssh/
    mode: '0600'
  tags:
    - dataserverborgconfig
    - dataserverprivatekey


#Create config for borg

- name: Config for borg
  template: 
    src: "files/borg-backup-web1.sh"
    dest: /etc/borg-backup.sh
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
  when: ansible_hostname == 'web1'

- name: Config for borg
  template: 
    src: "files/borg-backup-web2.sh"
    dest: /etc/borg-backup.sh
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
  when: ansible_hostname == 'web2'

- name: Config for borg
  template: 
    src: "files/borg-backup-nodeX.sh"
    dest: /etc/borg-backup.sh
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
  when: inventory_hostname in groups['nodes-ipsec']


- name: Config for borg
  template: 
    src: "files/borg-backup-node222.sh"
    dest: /etc/borg-backup.sh
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
  when: ansible_hostname == 'node222'


- name: Config for borg
  template: 
    src: "files/borg-backup-node225.sh"
    dest: /etc/borg-backup.sh
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
  when: ansible_hostname == 'node225'

- name: Config for borg
  template: 
    src: "files/borg-backup-database.sh"
    dest: /etc/borg-backup.sh
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
  when: ansible_hostname == 'database1'

- name: Config for borg
  template: 
    src: "files/borg-backup-zabbix.sh"
    dest: /etc/borg-backup.sh
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
  when: ansible_hostname == 'zabbixserver222'  


- name: Add Borg Service config
  template: 
    src: "files/borg-backup.service"
    dest: /etc/systemd/system
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
  
- name: Add Borg Service timer
  template: 
    src: "files/borg-backup.timer"
    dest: /etc/systemd/system
    owner: "{{ borg_user }}"
    group: "{{ borg_group }}"
    mode: '0755'
  tags:
    - dataserverborgconfig
    - dataserver
    - recovery    
  notify:
    - systemctl daemon reload


#install borg-backup

- name: borg-backup
  service:
    name: borg-backup
    enabled: yes
    state: started
  notify:
    - systemctl daemon reload


- name: reload systemctl
  command: systemctl daemon-reload
  tags: recovery

- name: borg-backup.timer
  service:
    name: borg-backup.timer
    enabled: yes
    state: started
  notify:
    - systemctl daemon reload
  tags: recovery

# - name: get | rsakey 
#   shell: cat /root/.ssh/id_rsa_borg.pub
#   ignore_errors: false
#   become: true
#   register: rsakey_content


# - name: get| rsakey write to file
#   local_action:
#     module: lineinfile
#     dest: "../../15_borg-rsa-key/rsa-key-{{ inventory_hostname }}.txt"
#     line: "{{ item['stdout'] }}"
#     create: yes
#   loop: "{{ rsakey_content['results'] }}"
#   become: true
#   changed_when: true


# - name: Read SSH key
#   ansible.builtin.slurp:
#     src: "~root/.ssh/id_rsa_borg.pub"
#   register: backup_local_ssh_key

# - name: Print key
#   ansible.builtin.debug:
#     msg: "ssh-ed need to be decode: {{ backup_local_ssh_key['content']}}  - base64 --decode"

# - name: get| rsakey write to file
#   local_action:
#     module: lineinfile
#     dest: "../rsa-key/rsa-key-{{ inventory_hostname }}.txt"
#     line: "{{ backup_local_ssh_key['content']}}"
#     create: yes
#   become: true
#   changed_when: true

# - name: Another way to call known_hosts
#   known_hosts:
#     name: 192.168.225.40
#     key: |1|F6SjxiTfwXbr/L73EwrH4o7CRTA=|z5vrGStKHJ9p9st9dT6XN0Xyl44= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIENKp6OGhp4ZGe//7LKymkHP1Qjfjj4N6XNQxfAOIOVR
#     path: /etc/ssh/ssh_known_hosts
#     state: present


- name: Borg init Repo
  shell: |
      ssh-keyscan -H 192.168.225.40 >> ~/.ssh/known_hosts
      borg init --encryption=none borg@192.168.225.40:/var/backup/{hostname}/
      exit 0
  tags:
    - borginit
  notify:
    - restartborgbackup
