---
##Set timezone
- name: set timezone
  shell: timedatectl set-timezone Europe/Moscow

#Install Chrony to time Sync

- name: Synchronize datetime | Install chrony
  apt:
    name: chrony
    state: latest
  tags:
    - backupserver-datesync

#Enable Chrony Services to time Sync

- name: Synchronize datetime | Turn on chronyd
  service:
    name: chronyd
    enabled: yes
    state: started
  notify:
    - systemctl daemon reload
  tags:
    - backupserver-datesync


# Устанавливаем инструменты анализа сети
- name: install base tools
  apt:
    name:
      - traceroute
      - tcpdump
      - net-tools
      - mtr
      - curl
      - iperf3
    state: present
    update_cache: true
  tags:
    - netanalize



#install NetworkManager


- name: Install NetworkManager
  apt:
    name: network-manager
    state: present
  tags:
    - NetworkManager

- name: Enable Networkmanager
  service:
    name: NetworkManager
    enabled: yes
    state: started
  notify:
    - systemctl daemon reload
  tags:
    - NetworkManager

#disable ufw firewall
- name: Disable ufw services if enabled
  shell: "if systemctl is-enabled --quiet {{ item }}; then systemctl disable {{ item }} && echo disable_ok ; fi"
  register: output
  changed_when: "'disable_ok' in output.stdout"
  loop:
    - ufw
  tags:
    - ufwoff
    - netanalize





# Move file ifupdown

- name: Check if file exists
  ansible.builtin.stat:
    path: "/etc/network/interfaces"
  register: check_file_name

- name: print debug
  ansible.builtin.debug:
     var: check_file_name

- name: Copy file with new name
  ansible.builtin.copy:
    remote_src: true
    src: "/etc/network/interfaces"
    dest: "/etc/network/interfaces.save"
  when: check_file_name.stat.exists

- name: Remove old file
  ansible.builtin.file:
    path: "/etc/network/interfaces"
    state: absent
  when: check_file_name.stat.exists

- name: Restart NetworkManager
  service:
    name: NetworkManager
    state: restarted


#NMCLI Set interface


- name: Add an Ethernet ETH0 low priority
  community.general.nmcli:
    conn_name: eth0
    ifname: eth0
    type: ethernet
    method4: "auto"
    route_metric4: 300
    state: present
  tags: eth0

- name: Add an Ethernet LAN222 connection with static IP configuration
  community.general.nmcli:
    conn_name: eth1
    ifname: eth1
    type: ethernet
    ip4: 192.168.222.10/24
    gw4: 192.168.222.254
    route_metric4: 100
    state: present
  tags: eth1

- name: Add an Ethernet WAN1 with static IP configuration
  community.general.nmcli:
    conn_name: eth2
    ifname: eth2
    type: ethernet
    ip4: 192.168.56.10/24
    state: present
  tags: eth2



- name: Restart NetworkManager
  service:
    name: NetworkManager
    state: restarted


#nmcli networking off && nmcli networking on

- name: nmcli networking off 
  shell: 
    cmd: nmcli networking off && nmcli networking on

- name: Gather current interface configuration
  shell: 
    cmd: nmcli
  register: nmcli_conn

- name: STDOUT nmcli_conn
  debug: 
    msg: "{{ nmcli_conn.stdout_lines }}"




##Install Apache

- name: install Apache tools
  apt:
    name:
      - apache2
      - php
      - php-mysql
      - php-mysqlnd
      - php-ldap
      - php-bcmath
      - php-mbstring
      - php-gd
      - php-pdo
      - php-xml
      - libapache2-mod-php
    state: present
    update_cache: true
  tags:
    - apache2


- name: Enable Apache server
  service:
    name: apache2
    enabled: true
  notify:
    - restartapache2


##Install MysqlServer


# Installation tasks for Ubuntu
# https://www.percona.com/doc/percona-server/8.0/installation/apt_repo.html

- name: "Install gnupg"
  apt:
    name: gnupg2
    update_cache: yes


- name: "Install percona-release package"
  apt:
    deb: "https://repo.percona.com/apt/percona-release_latest.{{ ansible_distribution_release }}_all.deb"

- name: "Update apt cache"
  apt:
    update_cache: yes

# https://www.percona.com/doc/percona-server/LATEST/installation/apt_repo.html
- name: "Enable Percona repository (Percona version >= 8)"
  command: "percona-release setup ps{{ mysql_version_major }}{{ mysql_version_minor }}"
  when: mysql_version_major|int >= 8
  changed_when: False     # TODO: check for task idempotency

- name: "Install percona server packages and dependencies on Debian(Percona version >= 8)"
  apt:
    name:
      - "percona-server-server={{ mysql_version_major }}.{{ mysql_version_minor }}*"
    state: "present"
  when: mysql_version_major|int >= 8

- name: "Install percona client packages and dependencies on Debian (Percona version >= 8)"
  apt:
    name:
      - "percona-server-client={{ mysql_version_major }}.{{ mysql_version_minor }}*"
    state: "present"
  when: mysql_version_major|int >= 8


- name: "Install percona toolkit packages and dependencies on Debian (Percona version >= 8)"
  apt:
    name:

      - "percona-toolkit"
    state: "present"
  when: mysql_version_major|int >= 8

- name: "Install pymysql3"
  apt:
    name:
      - python3-pymysql
  tags: pymysql


- name: "Install mc, percona-toolkit and Percona Xtrabackup"
  apt:
    name:
      - percona-xtrabackup-80
      - mc
      - percona-toolkit
      - zstd
      - lz4
    update_cache: yes

- name: "Adjust permissions of datadir"
  file:
    path: "{{ mysql_datadir }}"
    owner: "mysql"
    group: "mysql"
    mode: 0700
    state: "directory"


- name: Start mysql
  service:
    name: mysql
    state: started
  tags: stage99

- name: "Set the root password"
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_password }}"
    check_implicit_admin: yes
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock
  with_items:
    - "{{ ansible_hostname }}"
    - "127.0.0.1"
    - "::1"
    - "localhost"


- name: Copy percona configuration
  copy:
    src: "{{ item }}"
    dest: "/etc/mysql/mysql.conf.d/"
  with_fileglob:
    - files/etc/my.cnf.d/*
  tags: mysqlconf


- name: "Copy .my.cnf file into the root home folder"
  template:
    src: "templates/my.cnf.j2"
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: 0600

- name: Restart MySQL
  service:
    name: mysql
    state: restarted

#ansible-galaxy collection install community.mysql



- name: Try to create database zabbix. 
  community.mysql.mysql_db:
    check_implicit_admin: true
    login_user: root
    login_password: "{{ mysql_password }}"
    collation: utf8mb4_bin
    encoding: utf8mb4
    name: zabbix
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
  tags:
    - zabbixdb


- name: Create database user & grant all privileges on the testdb
  mysql_user:
    name: zabbix
    password: "{{ mysql_password }}"
    priv: 'zabbix.*:ALL'
    host: '%'
    state: present
    login_user: root
    login_password: "{{ mysql_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  tags: 
    - createzabbixuser
    - zabbixdb

- name: Set global log_bin_trust_function_creators = 1;
  community.mysql.mysql_query:
    query: set global log_bin_trust_function_creators = 1;
    login_user: root
    login_password: "{{ mysql_password }}"
    login_unix_socket: /run/mysqld/mysqld.sock
  tags: 
    - setzabbixdatabase
    - zabbixdb




- name: Set global log_bin_trust_function_creators = 0;
  community.mysql.mysql_query:
    query: set global log_bin_trust_function_creators = 0;
    login_user: root
    login_password: "{{ mysql_password }}"
    login_unix_socket: /run/mysqld/mysqld.sock
  tags: 
    - setzabbixdatabase
    - zabbixdb

## Install Zabbix Server

#get package

- name: Check if my_package Debian is installed
  command: dpkg-query -W zabbix-release_6.0-5+debian12_all.deb
  register: my_package_check_deb
  failed_when: my_package_check_deb.rc > 1
  changed_when: my_package_check_deb.rc == 1
  tags: zabbixdeb

- name: Download Zabbix 6.0 LTS
  get_url: 
    url: "https://repo.zabbix.com/zabbix/6.0/debian/pool/main/z/zabbix-release/zabbix-release_6.0-5+debian12_all.deb"
    dest: "/home/vagrant/zabbix-release_6.0-5+debian12_all.deb"
  when: my_package_check_deb.rc == 1
  tags: zabbixdeb

# - name: Download Zabbix 6.0 LTS
#   ansible.builtin.get_url:
#     url: http://example.com/path/file.conf
#     dest: /etc/foo.conf
- name: Install Zabbix 6.0 LTS
  apt: deb="/home/vagrant/zabbix-release_6.0-5+debian12_all.deb"
  become: true
  when: my_package_check_deb.rc == 1
  tags: zabbixdeb


- name: install base tools
  apt:
    name:
      - zabbix-server-mysql
      - zabbix-frontend-php
      - zabbix-apache-conf
      - zabbix-sql-scripts
      - zabbix-agent

    state: present
    update_cache: true
  tags:
    - zabbixmodule
    - zabbixdeb



- name: Extract Zabbix Base Tables
  become: true
  shell: "{{item}}"
  with_items: 
     # - tar -xf /usr/share/zabbix-sql-scripts/mysql/server.sql.gz  -C /home/vagrant/serverzabbix.sql
     - zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz >> /home/vagrant/serverzabbix.sql
  tags:
    - zabbixextractdatabase
    - zabbixdb


- name: Restore database
  community.mysql.mysql_db:
    name: zabbix
    login_user: root
    login_password: "{{ mysql_password }}"
    login_unix_socket: /run/mysqld/mysqld.sock
    state: import
    target: /home/vagrant/serverzabbix.sql
  tags:
    - zabbixdatabaseinstall
    - zabbixdb

- name: 	/etc/zabbix/zabbix_server.conf 
  ansible.builtin.lineinfile:
    path: /etc/zabbix/zabbix_server.conf 
    regexp: '^# DBPassword'
    line: DBPassword={{ mysql_password }}
    # owner: root
    # group: root
    # mode: '0644'
  tags: zabbix_server.conf

# #disable ufw firewall
# - name: Disable ufw services if enabled
#   shell: "if systemctl is-enabled --quiet {{ item }}; then systemctl disable {{ item }} && echo disable_ok ; fi"
#   register: output
#   changed_when: "'disable_ok' in output.stdout"
#   loop:
#     - ufw
#   tags:
#     - ufwoff
#     - inetrouter


# #Install IPSEC

# - name: Install Zabbix package
#   apt:
#     name: zabbix
#     state: present

- name: Enable zabbix server
  service:
    name: zabbix-server
    enabled: true
  notify:
    - restartzabbixserver



## NFTables

- name: Enable NFTables
  service:
    name: nftables
    enabled: yes
    state: started
  notify:
    - systemctl daemon reload
  tags:
    - nftables


- name: Copy NFTables rules
  copy: 
    src: "files/nftables.conf"
    dest: /etc/nftables.conf
    owner: root
    group: root
    mode: 0744
  notify: RestartNFTables
  tags: nftconfig


 